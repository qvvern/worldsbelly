// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldsBelly.DataAccess.Contexts;

namespace WorldsBelly.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221124112517_approvalcreatedby")]
    partial class approvalcreatedby
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IngredientTag", b =>
                {
                    b.Property<int>("IngredientsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("IngredientsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TagToIngredient");
                });

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("RecipesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TagToRecipe");
                });

            modelBuilder.Entity("RecipeUserTag", b =>
                {
                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.Property<int>("UserTagsId")
                        .HasColumnType("int");

                    b.HasKey("RecipesId", "UserTagsId");

                    b.HasIndex("UserTagsId");

                    b.ToTable("UserTagToRecipe");
                });

            modelBuilder.Entity("TagSelectableTagSelectableCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("TagSelectablesId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "TagSelectablesId");

                    b.HasIndex("TagSelectablesId");

                    b.ToTable("TagSelectableCategoryToTagSelectable");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("RootId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.CommentTranslation", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CommentTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Capital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DialCode")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("NativeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrimaryLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryLanguageId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.CountryAlternativeLanguage", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("CountryId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CountryAlternativeLanguages");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.CountryTranslation", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId", "LanguageId");

                    b.ToTable("CountryTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.EnglishTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextPlural")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("EnglishTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DefaultMeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultNutrientMeasurementId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishNamePlural")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NutrientsAmount")
                        .HasColumnType("int");

                    b.Property<double?>("OneCentimeterInGram")
                        .HasColumnType("float");

                    b.Property<double?>("OneCentimeterInMilliliter")
                        .HasColumnType("float");

                    b.Property<double?>("OneMilliliterInGram")
                        .HasColumnType("float");

                    b.Property<double?>("OnePieceInCentimeter")
                        .HasColumnType("float");

                    b.Property<double?>("OnePieceInGram")
                        .HasColumnType("float");

                    b.Property<double?>("OnePieceInMilliliter")
                        .HasColumnType("float");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int?>("TranslationsAmount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WikidataId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultMeasurementId");

                    b.HasIndex("DefaultNutrientMeasurementId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.IngredientNutrient", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("NutrientId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IngredientId", "NutrientId");

                    b.HasIndex("NutrientId");

                    b.ToTable("IngredientNutrients");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.IngredientTranslation", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePlural")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("IngredientTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("NativeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WikidataLanguageCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<double>("ConversionAmount")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EnglishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishNamePlural")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMultipleConversions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImperial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMetric")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WikidataId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.MeasurementMultipleConversion", b =>
                {
                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<double>("ConversionAmount")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("MeasurementId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("MeasurementMultipleConversions");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.MeasurementTranslation", b =>
                {
                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePlural")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeasurementId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("MeasurementTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.MeasurementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("MeasurementTypes");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.MeasurementTypeTranslation", b =>
                {
                    b.Property<int>("MeasurementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeasurementTypeId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("MeasurementTypeTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DefaultMeasurementId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishNamePlural")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<int>("NutrientDbId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WikidataId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultMeasurementId");

                    b.ToTable("Nutrients");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.NutrientTranslation", b =>
                {
                    b.Property<int>("NutrientId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePlural")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NutrientId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("NutrientTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("BestServedId")
                        .HasColumnType("int");

                    b.Property<int>("CalculatedTotalComments")
                        .HasColumnType("int");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OriginCountryId")
                        .HasColumnType("int");

                    b.Property<int>("OriginalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ServingAmount")
                        .HasColumnType("int");

                    b.Property<double>("TotalCookingTime")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrepTime")
                        .HasColumnType("float");

                    b.Property<int>("TotalSaved")
                        .HasColumnType("int");

                    b.Property<double>("TotalTime")
                        .HasColumnType("float");

                    b.Property<int>("TotalViews")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("BestServedId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("OriginCountryId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeAgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagId")
                        .IsUnique();

                    b.ToTable("RecipeAgeGroup");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("RecipeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipeTranslationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnPublishedIngredientIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnPublishedIngredientNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnPublishedIngredients")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RecipeApprovals");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeBestServed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagId")
                        .IsUnique();

                    b.ToTable("RecipeBestServed");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeCalculatedNutrient", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("NutrientId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("RecipeId", "NutrientId");

                    b.HasIndex("NutrientId");

                    b.ToTable("RecipeCalculatedNutrients");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeCalculatedRating", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<double>("Bitter")
                        .HasColumnType("float");

                    b.Property<double>("Flavor")
                        .HasColumnType("float");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<double>("Salty")
                        .HasColumnType("float");

                    b.Property<double>("Sour")
                        .HasColumnType("float");

                    b.Property<double>("Spices")
                        .HasColumnType("float");

                    b.Property<double>("Sweet")
                        .HasColumnType("float");

                    b.Property<int>("TotalFlavorRatings")
                        .HasColumnType("int");

                    b.Property<int>("TotalRatings")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RecipeId");

                    b.ToTable("RecipeCalculatedRatings");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeComment", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "CommentId");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.ToTable("RecipeComments");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeConsumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagId")
                        .IsUnique();

                    b.ToTable("RecipeConsumer");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeDifficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagId")
                        .IsUnique();

                    b.ToTable("RecipeDifficulty");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("AmountPerServingDefaultNutrientMeasurement")
                        .HasColumnType("float");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeIngredientListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("RecipeIngredientListId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredientList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredientLists");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredientListTranslation", b =>
                {
                    b.Property<int>("RecipeIngredientListId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeIngredientListId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("RecipeIngredientListTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredientTranslation", b =>
                {
                    b.Property<int>("RecipeIngredientId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeIngredientId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("RecipeIngredientTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Bitter")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Flavor")
                        .HasColumnType("float");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<double?>("Salty")
                        .HasColumnType("float");

                    b.Property<double?>("Sour")
                        .HasColumnType("float");

                    b.Property<double?>("Spices")
                        .HasColumnType("float");

                    b.Property<double?>("Sweet")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("RecipeRatings");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeSteps");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeStepTranslation", b =>
                {
                    b.Property<int>("RecipeStepId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeStepId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("RecipeStepTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeTranslation", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RecipeId", "LanguageId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("RecipeTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EnglishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishNamePlural")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ExcludeAlways")
                        .HasColumnType("bit");

                    b.Property<bool?>("Hidden")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IncludeAlways")
                        .HasColumnType("bit");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("RecipeReferencesAmount")
                        .HasColumnType("int");

                    b.Property<int?>("TagTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TranslationsAmount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WikidataId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagTypeId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.TagSelectable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DontAddTag")
                        .HasColumnType("bit");

                    b.Property<string>("ExcludedTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("TagSelectables");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.TagSelectableCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExcludedTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TextId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.HasIndex("TitleId")
                        .IsUnique();

                    b.ToTable("TagSelectableCategories");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.TagSelectableChoiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedChoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("TagSelectableCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TagSelectableCategoryId");

                    b.ToTable("TagSelectableChoiceOrders");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.TagTranslation", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePlural")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("TagTranslations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.TagType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TagTypes");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Translation", b =>
                {
                    b.Property<int>("EnglishTranslationId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextPlural")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("EnglishTranslationId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ADObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Anonymous")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("References")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalRecipes")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.UserTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeReferencesAmount")
                        .HasColumnType("int");

                    b.Property<int?>("TagTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TagTypeId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("IngredientTag", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeUserTag", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.UserTag", null)
                        .WithMany()
                        .HasForeignKey("UserTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagSelectableTagSelectableCategory", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.TagSelectableCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.TagSelectable", null)
                        .WithMany()
                        .HasForeignKey("TagSelectablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Comment", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("WorldsBelly.DataAccess.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("WorldsBelly.DataAccess.Entities.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.CommentTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Comment", "Comment")
                        .WithMany("Translations")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Country", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "PrimaryLanguage")
                        .WithMany()
                        .HasForeignKey("PrimaryLanguageId");

                    b.Navigation("PrimaryLanguage");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.CountryAlternativeLanguage", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Country", null)
                        .WithMany("AlternativeLanguages")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.CountryTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Country", null)
                        .WithMany("Translations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Ingredient", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Measurement", "DefaultMeasurement")
                        .WithMany()
                        .HasForeignKey("DefaultMeasurementId");

                    b.HasOne("WorldsBelly.DataAccess.Entities.Measurement", "DefaultNutrientMeasurement")
                        .WithMany()
                        .HasForeignKey("DefaultNutrientMeasurementId");

                    b.Navigation("DefaultMeasurement");

                    b.Navigation("DefaultNutrientMeasurement");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.IngredientNutrient", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Ingredient", "Ingredient")
                        .WithMany("Nutrients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Nutrient", "Nutrient")
                        .WithMany()
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.IngredientTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Ingredient", "Ingredient")
                        .WithMany("Translations")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Measurement", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.MeasurementType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.MeasurementMultipleConversion", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Measurement", null)
                        .WithMany("MultipleConversions")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.MeasurementTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Measurement", null)
                        .WithMany("Translations")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.MeasurementTypeTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.MeasurementType", null)
                        .WithMany("Translations")
                        .HasForeignKey("MeasurementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Nutrient", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Measurement", "DefaultMeasurement")
                        .WithMany()
                        .HasForeignKey("DefaultMeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultMeasurement");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.NutrientTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Nutrient", null)
                        .WithMany("Translations")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Recipe", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.RecipeAgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.RecipeBestServed", "BestServed")
                        .WithMany()
                        .HasForeignKey("BestServedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WorldsBelly.DataAccess.Entities.RecipeConsumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.RecipeDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WorldsBelly.DataAccess.Entities.Country", "OriginCountry")
                        .WithMany()
                        .HasForeignKey("OriginCountryId");

                    b.Navigation("AgeGroup");

                    b.Navigation("BestServed");

                    b.Navigation("Consumer");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Difficulty");

                    b.Navigation("OriginCountry");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeAgeGroup", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Tag", "Tag")
                        .WithOne()
                        .HasForeignKey("WorldsBelly.DataAccess.Entities.RecipeAgeGroup", "TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeBestServed", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Tag", "Tag")
                        .WithOne()
                        .HasForeignKey("WorldsBelly.DataAccess.Entities.RecipeBestServed", "TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeCalculatedNutrient", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Nutrient", "Nutrient")
                        .WithMany()
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Recipe", "Recipe")
                        .WithMany("CalculatedNutrients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeCalculatedRating", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Recipe", "Recipe")
                        .WithOne("CalculatedRating")
                        .HasForeignKey("WorldsBelly.DataAccess.Entities.RecipeCalculatedRating", "RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeComment", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Comment", "Comment")
                        .WithOne()
                        .HasForeignKey("WorldsBelly.DataAccess.Entities.RecipeComment", "CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeConsumer", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Tag", "Tag")
                        .WithOne()
                        .HasForeignKey("WorldsBelly.DataAccess.Entities.RecipeConsumer", "TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeDifficulty", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Tag", "Tag")
                        .WithOne()
                        .HasForeignKey("WorldsBelly.DataAccess.Entities.RecipeDifficulty", "TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.RecipeIngredientList", "RecipeIngredientList")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeIngredientListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Measurement");

                    b.Navigation("RecipeIngredientList");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredientList", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Recipe", "Recipe")
                        .WithMany("IngredientLists")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredientListTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.RecipeIngredientList", "RecipeIngredientList")
                        .WithMany("Translations")
                        .HasForeignKey("RecipeIngredientListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("RecipeIngredientList");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredientTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.RecipeIngredient", "RecipeIngredient")
                        .WithMany("Translations")
                        .HasForeignKey("RecipeIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("RecipeIngredient");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeRating", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Recipe", "Recipe")
                        .WithMany("Ratings")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.User", "User")
                        .WithMany("RecipeRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeStep", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeStepTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.RecipeStep", "RecipeStep")
                        .WithMany("Translations")
                        .HasForeignKey("RecipeStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("RecipeStep");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("RecipeTranslations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Recipe", null)
                        .WithMany("Translations")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Tag", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.TagType", "TagType")
                        .WithMany()
                        .HasForeignKey("TagTypeId");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.TagSelectable", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.TagSelectableCategory", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.EnglishTranslation", "Text")
                        .WithMany()
                        .HasForeignKey("TextId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WorldsBelly.DataAccess.Entities.EnglishTranslation", "Title")
                        .WithOne()
                        .HasForeignKey("WorldsBelly.DataAccess.Entities.TagSelectableCategory", "TitleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Text");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.TagSelectableChoiceOrder", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.HasOne("WorldsBelly.DataAccess.Entities.TagSelectableCategory", "TagSelectableCategory")
                        .WithMany()
                        .HasForeignKey("TagSelectableCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("TagSelectableCategory");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.TagTranslation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Tag", null)
                        .WithMany("Translations")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Translation", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.EnglishTranslation", "EnglishTranslation")
                        .WithMany("Translations")
                        .HasForeignKey("EnglishTranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnglishTranslation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.UserTag", b =>
                {
                    b.HasOne("WorldsBelly.DataAccess.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldsBelly.DataAccess.Entities.TagType", "TagType")
                        .WithMany()
                        .HasForeignKey("TagTypeId");

                    b.Navigation("Language");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Comment", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Country", b =>
                {
                    b.Navigation("AlternativeLanguages");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.EnglishTranslation", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Ingredient", b =>
                {
                    b.Navigation("Nutrients");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Measurement", b =>
                {
                    b.Navigation("MultipleConversions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.MeasurementType", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Nutrient", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Recipe", b =>
                {
                    b.Navigation("CalculatedNutrients");

                    b.Navigation("CalculatedRating");

                    b.Navigation("Comments");

                    b.Navigation("IngredientLists");

                    b.Navigation("Ratings");

                    b.Navigation("Steps");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredient", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeIngredientList", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.RecipeStep", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.Tag", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldsBelly.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("RecipeRatings");

                    b.Navigation("Recipes");

                    b.Navigation("RecipeTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
